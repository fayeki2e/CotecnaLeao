@using TechParvaLEAO.Authorization
@model IEnumerable<TechParvaLEAO.Areas.Reports.Models.PaidLeaveBalanceReportVm>

@{
    ViewData["Title"] = "Paid Leave Balance Report";
}

<h1>Paid Leave Balance Report</h1>
 
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <strong>Report Filter</strong>
                <span data-toggle="tooltip" data-placement="top" data-original-title="click for Filter">
                    &nbsp;
                    <a class="btn btn-info btn-sm" data-toggle="collapse"
                       data-target="#filter-for-search"><i class="fa fa-angle-double-down"></i></a>
                </span>
            </div>         
            <div class="card-body collapse" id="filter-for-search">
                <form class="form-horizontal" action="" method="get">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" for="expenseClaim-to-date">Leave Year</label>
                                <div class="col-md-9">
                                    @Html.DropDownList("LeaveYear", (SelectList)ViewData["LeaveYear"], "Select", new { @class = "form-control" })
                                    @Html.ValidationMessage("LeaveYear", "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">                            
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" for="expenseClaim-to-date">Location</label>
                                <div class="col-md-9">
                                    @Html.DropDownList("Branch", (SelectList)ViewData["Branch"], "Select", new { @class = "form-control" })
                                    @Html.ValidationMessage("Branch", "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                          <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" for="expenseClaim-to-date">From Date</label>
                                
                                <div class="col-md-9">
                                    @Html.Editor("FromDate", new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                    @Html.ValidationMessage("FromDate", "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>


                        <div class="col-md-6">    
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" for="expenseClaim-to-date">Employee</label>
                                <div class="col-md-9">
@*                                    @Html.DropDownList("Employee", (SelectList)ViewData["Employee"], "Select", new { @class = "form-control" })*@
@*                                    @Html.DropDownList("Employee", (SelectList)ViewData["Employee"], "Select", new { @class = "form-control" } )
                                         @Html.DropDownList("Employee1", (SelectList)ViewData["Employee"], "Select", new { @class = "form-control chosen" } )*@
                                    @Html.DropDownList("Employee", (SelectList)ViewData["Employee"], "Select", new { @class = "selectpicker", data_live_search = "true" })


                                    @Html.ValidationMessage("Employee", "", new { @class = "text-danger" })
                                </div>
                            </div>
                               @if (User.IsInRole(AuthorizationRoles.HR))
                            {
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" for="expenseClaim-to-date">Reporting Manager</label>
                                    <div class="col-md-9">
                                        @Html.DropDownList("ReportingManager", (SelectList)ViewData["ReportingManager"], "Select", new { @class = "form-control" })
                                        @Html.ValidationMessage("ReportingManager", "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                        </div>
                            <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" for="expenseClaim-to-date">To Date</label>
                          
                                <div class="col-md-9">
                                    @Html.Editor("ToDate", new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                    @Html.ValidationMessage("ToDate", "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">    
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" for="IncludeDeacivatedEmployees">Include Deactivated Employees</label>
                                <div class="col-md-9">
                                    <label class="switch">
                                        @Html.CheckBox("IncludeDeacivatedEmployees", false)
                                        <span class="slider round"></span>
                                    </label>
                                </div>
                            </div>                            
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <div class="col-md-9">
                                    <button class="btn btn-md btn-primary" type="submit">
                                        <i class="fa fa-dot-circle-o"></i> Search
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">

        <div id="dataGrid"></div>
    </div>

</div>
@*<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.4/jspdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.9/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.js"></script>*@


<script type="text/javascript" src="~/js/jquery-3.5.1.min.js"></script>
 <script src="~/js/exceljs.js"></script>
<script src="~/js/jspdf.min.js"></script>
<script src="~/js/jspdf.plugin.autotable.min.js"></script>
<script src="~/js/FileSaver.js"></script>

 
<script>

    function get_paidleavebalancereport()
    {
           $.ajax(
            {
                method: "POST",
                url: '@Url.Action("PaidLeaveBalanceReport", "PaidLeaveBalanceReport")',
                data: {},
                success: function (data) {
                   const PaidLeaveBalanceReport_data = data;
                   get_grid(data);

          

                   if(data[0].is_hr >=1)
                   {

                        $("#dataGrid").dxDataGrid("columnOption", "reportingManager", "visible", true);
                   }
                   else
                   {
                        $("#dataGrid").dxDataGrid("columnOption", "reportingManager", "visible",false );
                   }

   

                  

                },
                error: function (msg) {
                  
                }
            });
    }


function get_grid(data)
{ 
const gridInstance = $('#dataGrid').dxDataGrid({
    dataSource: data,
    keyExpr: 'id',
    allowColumnReordering: true,
    allowColumnResizing: true,
    columnAutoWidth: true,
    showBorders: true,
    filterRow: {
    visible: true,
    applyFilter: 'auto',
    },
     filterPanel: { visible: false },              
     headerFilter: { 
     visible: true,
     allowSearch: true
        },
    searchPanel: { visible: false,
    highlightCaseSensitive: true},
    columnChooser: {
    enabled: false,
    },
    columnFixing: {
      enabled: false,
    },
     export: {
      enabled: true,
      allowExportSelectedData: true,
    },
    columns: [ 
    {
      caption: 'Emp Code',
      dataField: 'employeeCode',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
    {
      dataField: 'name',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
       
    },
      {
      dataField: 'designation',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
     {
      dataField: 'branch',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
     {
      dataField: 'reportingManager',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
      visible: true,
    },
    {
      caption: 'Annual Leaves Pro Rata',
      dataField: 'annualLeaves',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
    {
          caption: 'Carry Forward From Last Year',
      dataField: 'carryForwardLastYear',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
    {
         caption: 'Total Leaves',
      dataField: 'totalLeaves',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
     {
           caption: 'Leaves Utilized',
      dataField: 'leavesUtilized',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
    {
             caption: 'Planned Leaves',
      dataField: 'plannedLeaves',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
    {
         caption: 'Unplanned Leaves',
      dataField: 'unplannedLeaves',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    },
    {
         caption: 'Leaves Pending',
      dataField: 'leavesBalance',
      dataType: 'String',
      allowFiltering: true,      
      allowSearch: true,
      filterOperations: ["contains", "=",">","<"],
    }
       ],
        toolbar: {
      items: [
        'groupPanel',
        {
          widget: 'dxButton',
          location: 'after',
          options: {
            icon: 'exportpdf',
            text: 'Export to PDF',
            onClick() {
              const doc = new jsPDF();
          

              DevExpress.pdfExporter.exportDataGrid({
                jsPDFDocument: doc,
                component: gridInstance,
              }).then(() => {
                doc.save('PaidLeaveBalance.pdf');
              });
            },
          },
        },
        {
          widget: 'dxButton',
          location: 'after',
          options: {
            icon: 'exportexcel',
            text: 'Export to Excel',
            onClick() {
          const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('PaidLeaveBalance');
      


      DevExpress.excelExporter.exportDataGrid({
        component: gridInstance,
        worksheet,
        autoFilterEnabled: true,
      }).then(() => {
        workbook.xlsx.writeBuffer().then((buffer) => {
          saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PaidLeaveBalance.xlsx');
        });
      });
       
            },
          },
        },
        'searchPanel',
      ],
    },


  }).dxDataGrid('instance');
  
 
}

</script>



<script>
	$(document).ready(function() { 	 
	get_paidleavebalancereport();
     

	});
</script>

